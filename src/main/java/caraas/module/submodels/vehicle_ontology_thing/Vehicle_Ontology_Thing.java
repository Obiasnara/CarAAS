/*******************************************************************************
 * Copyright (c) 2024 DFKI.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     DFKI - Tapanta Bhanja <tapanta.bhanja@dfki.de>
 *******************************************************************************/ 
package caraas.module.submodels.vehicle_ontology_thing;

import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.List;

import java.math.BigInteger; 

import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.datatype.Duration;
import javax.xml.namespace.QName;

import caraas.connection.ConnectedDevices;
//import caraas.connection.DataCrawler;
import caraas.module.AASServer;
import caraas.module.ConceptDescriptions;
import caraas.connection.OpcUaVariable;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.operation.Operation;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.SubmodelElementCollection;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.property.valuetype.ValueType;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.File;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.property.Property;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.MultiLanguageProperty;
import org.eclipse.basyx.submodel.metamodel.map.qualifier.LangStrings;
import org.eclipse.basyx.submodel.metamodel.map.reference.Key; 
import org.eclipse.basyx.submodel.metamodel.map.reference.Reference; 
import org.eclipse.basyx.submodel.metamodel.api.reference.IKey;
import org.eclipse.basyx.submodel.metamodel.api.reference.enums.KeyElements; 
import org.eclipse.basyx.submodel.metamodel.api.reference.enums.KeyType; 
import org.eclipse.basyx.submodel.metamodel.api.identifier.IdentifierType;
import org.eclipse.basyx.submodel.metamodel.api.qualifier.haskind.ModelingKind;
import org.eclipse.basyx.submodel.metamodel.api.submodelelement.ISubmodelElement;
import org.eclipse.basyx.submodel.metamodel.map.Submodel;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.operation.OperationVariable;
import com.festo.aas.p4m.connection.ValueDelegate; 
import org.eclipse.basyx.vab.protocol.opcua.types.NodeId;
import org.eclipse.basyx.vab.protocol.opcua.types.UnsignedShort;
import com.festo.aas.p4m.connection.ConnectedProperty;

/**
 * 
 * @author DFKI
 * 
 * Do not edit this file for changing operation behaviours. 
 */

public class Vehicle_Ontology_Thing extends Submodel {

	/**
	 * This field variable holds all configured connectors to the asset. 
	 * Use these connectors to communicate with your asset.
	 */
	private ConnectedDevices connectedDevices;

	private ConceptDescriptions conceptDescriptions;

	/**
     * This class contains all user-provided code for operations.
     */
	private final DynamicElementsWorkspace dew; 

	 /**
     * This class contains all user-provided code for value delegates.
     */

	 /**
     * The following contains the declaration of the operation variables as field variables so that they can be accessed in their true sense.
     */


	public Vehicle_Ontology_Thing() {

		try {
			connectedDevices = new ConnectedDevices();
		} 
		catch (Exception e) {

			e.printStackTrace();
		}
		
		dew = new DynamicElementsWorkspace(connectedDevices);
		conceptDescriptions = new ConceptDescriptions();

		setIdShort("Vehicle_Ontology_Thing");
		setIdentification(IdentifierType.IRI, AASServer.getSettings().SUBMODEL_VEHICLE_ONTOLOGY_THING_IRI.get().toString()); 
		setKind(ModelingKind.TEMPLATE); 
		List<IKey> vehicle_ontology_thingKeys= new ArrayList<IKey>();
		Reference Vehicle_Ontology_ThingRef = new Reference(vehicle_ontology_thingKeys);
		setSemanticId(Vehicle_Ontology_ThingRef); 
 
		SubmodelElementCollection Vehicle_Ontology_Thing_Vehicle_Perdurant = new SubmodelElementCollection();
		Collection<ISubmodelElement> Vehicle_Ontology_Thing_Vehicle_Perdurantvalue = new ArrayList<ISubmodelElement>();
		Vehicle_Ontology_Thing_Vehicle_Perdurant.setIdShort("Vehicle_Perdurant");
		Vehicle_Ontology_Thing_Vehicle_Perdurant.setAllowDuplicates(false);
		Vehicle_Ontology_Thing_Vehicle_Perdurant.setOrdered(false);
     	Vehicle_Ontology_Thing_Vehicle_Perdurant.setKind(ModelingKind.TEMPLATE);
		addSubmodelElement(Vehicle_Ontology_Thing_Vehicle_Perdurant);
		List<IKey> Vehicle_Ontology_Thing_vehicle_perdurantKeys= new ArrayList<IKey>();
		Reference Vehicle_Ontology_Thing_Vehicle_PerdurantRef = new Reference(Vehicle_Ontology_Thing_vehicle_perdurantKeys);
		Vehicle_Ontology_Thing_Vehicle_Perdurant.setSemanticId(Vehicle_Ontology_Thing_Vehicle_PerdurantRef); 
 
		ValueDelegate<Collection<ISubmodelElement>> valDelVehicle_Ontology_Thing_Vehicle_Perdurant = ValueDelegate.installOn(Vehicle_Ontology_Thing_Vehicle_Perdurant); 
		valDelVehicle_Ontology_Thing_Vehicle_Perdurant.setGetHandler(dew::get_Vehicle_Ontology_Thing_Vehicle_Perdurant); 


		SubmodelElementCollection Vehicle_Ontology_Thing_Vehicle = new SubmodelElementCollection();
		Collection<ISubmodelElement> Vehicle_Ontology_Thing_Vehiclevalue = new ArrayList<ISubmodelElement>();
		Vehicle_Ontology_Thing_Vehicle.setIdShort("Vehicle");
		Vehicle_Ontology_Thing_Vehicle.setAllowDuplicates(false);
		Vehicle_Ontology_Thing_Vehicle.setOrdered(false);
     	Vehicle_Ontology_Thing_Vehicle.setKind(ModelingKind.TEMPLATE);
		addSubmodelElement(Vehicle_Ontology_Thing_Vehicle);
		List<IKey> Vehicle_Ontology_Thing_vehicleKeys= new ArrayList<IKey>();
		Reference Vehicle_Ontology_Thing_VehicleRef = new Reference(Vehicle_Ontology_Thing_vehicleKeys);
		Vehicle_Ontology_Thing_Vehicle.setSemanticId(Vehicle_Ontology_Thing_VehicleRef); 
 


		SubmodelElementCollection Vehicle_Freenove_Vehicle = new SubmodelElementCollection();
		Collection<ISubmodelElement> Vehicle_Freenove_Vehiclevalue = new ArrayList<ISubmodelElement>();
		Vehicle_Freenove_Vehicle.setIdShort("Freenove_Vehicle");
		Vehicle_Freenove_Vehicle.setAllowDuplicates(false);
		Vehicle_Freenove_Vehicle.setOrdered(false);
     	Vehicle_Freenove_Vehicle.setKind(ModelingKind.TEMPLATE);
		Vehicle_Ontology_Thing_Vehiclevalue.add(Vehicle_Freenove_Vehicle);

		List<IKey> Vehicle_freenove_vehicleKeys= new ArrayList<IKey>();
		Reference Vehicle_Freenove_VehicleRef = new Reference(Vehicle_freenove_vehicleKeys);
		Vehicle_Freenove_Vehicle.setSemanticId(Vehicle_Freenove_VehicleRef); 
 


		SubmodelElementCollection Freenove_Vehicle_Freenove_4WD_Smart_Car = new SubmodelElementCollection();
		Collection<ISubmodelElement> Freenove_Vehicle_Freenove_4WD_Smart_Carvalue = new ArrayList<ISubmodelElement>();
		Freenove_Vehicle_Freenove_4WD_Smart_Car.setIdShort("Freenove_4WD_Smart_Car");
		Freenove_Vehicle_Freenove_4WD_Smart_Car.setAllowDuplicates(false);
		Freenove_Vehicle_Freenove_4WD_Smart_Car.setOrdered(false);
     	Freenove_Vehicle_Freenove_4WD_Smart_Car.setKind(ModelingKind.TEMPLATE);
		Vehicle_Freenove_Vehiclevalue.add(Freenove_Vehicle_Freenove_4WD_Smart_Car);

		List<IKey> Freenove_Vehicle_freenove_4wd_smart_carKeys= new ArrayList<IKey>();
		Reference Freenove_Vehicle_Freenove_4WD_Smart_CarRef = new Reference(Freenove_Vehicle_freenove_4wd_smart_carKeys);
		Freenove_Vehicle_Freenove_4WD_Smart_Car.setSemanticId(Freenove_Vehicle_Freenove_4WD_Smart_CarRef); 
 


		Property Freenove_4WD_Smart_Car_hasIPAddress= new Property();
		Freenove_4WD_Smart_Car_hasIPAddress.setIdShort("hasIPAddress");
		Freenove_4WD_Smart_Car_hasIPAddress.setValueType(ValueType.String);
		List<IKey> Freenove_4WD_Smart_Car_hasipaddressKeys= new ArrayList<IKey>();
		Reference Freenove_4WD_Smart_Car_hasIPAddressRef = new Reference(Freenove_4WD_Smart_Car_hasipaddressKeys);
		Freenove_4WD_Smart_Car_hasIPAddress.setSemanticId(Freenove_4WD_Smart_Car_hasIPAddressRef); 
 
		Freenove_4WD_Smart_Car_hasIPAddress.setKind(ModelingKind.TEMPLATE);
		Freenove_Vehicle_Freenove_4WD_Smart_Carvalue.add(Freenove_4WD_Smart_Car_hasIPAddress);

		Freenove_4WD_Smart_Car_hasIPAddress.setValue("null");


		Property Freenove_4WD_Smart_Car_hasMACAddress= new Property();
		Freenove_4WD_Smart_Car_hasMACAddress.setIdShort("hasMACAddress");
		Freenove_4WD_Smart_Car_hasMACAddress.setValueType(ValueType.String);
		List<IKey> Freenove_4WD_Smart_Car_hasmacaddressKeys= new ArrayList<IKey>();
		Reference Freenove_4WD_Smart_Car_hasMACAddressRef = new Reference(Freenove_4WD_Smart_Car_hasmacaddressKeys);
		Freenove_4WD_Smart_Car_hasMACAddress.setSemanticId(Freenove_4WD_Smart_Car_hasMACAddressRef); 
 
		Freenove_4WD_Smart_Car_hasMACAddress.setKind(ModelingKind.TEMPLATE);
		Freenove_Vehicle_Freenove_4WD_Smart_Carvalue.add(Freenove_4WD_Smart_Car_hasMACAddress);

		Freenove_4WD_Smart_Car_hasMACAddress.setValue("null");


		Property Freenove_4WD_Smart_Car_hasTimeStamp= new Property();
		Freenove_4WD_Smart_Car_hasTimeStamp.setIdShort("hasTimeStamp");
		Freenove_4WD_Smart_Car_hasTimeStamp.setValueType(ValueType.None);
		List<IKey> Freenove_4WD_Smart_Car_hastimestampKeys= new ArrayList<IKey>();
		Reference Freenove_4WD_Smart_Car_hasTimeStampRef = new Reference(Freenove_4WD_Smart_Car_hastimestampKeys);
		Freenove_4WD_Smart_Car_hasTimeStamp.setSemanticId(Freenove_4WD_Smart_Car_hasTimeStampRef); 
 
		Freenove_4WD_Smart_Car_hasTimeStamp.setKind(ModelingKind.TEMPLATE);
		Freenove_Vehicle_Freenove_4WD_Smart_Carvalue.add(Freenove_4WD_Smart_Car_hasTimeStamp);

		Freenove_4WD_Smart_Car_hasTimeStamp.setValue("null");


		// Adding the SubmodelElements that belong to SubmodelElementCollection - Freenove_4WD_Smart_Car. 
		Freenove_Vehicle_Freenove_4WD_Smart_Car.setElements(Freenove_Vehicle_Freenove_4WD_Smart_Carvalue.stream().collect(Collectors.toMap(ISubmodelElement::getIdShort, Function.identity())));
 
		// Adding the SubmodelElements that belong to SubmodelElementCollection - Freenove_Vehicle. 
		Vehicle_Freenove_Vehicle.setElements(Vehicle_Freenove_Vehiclevalue.stream().collect(Collectors.toMap(ISubmodelElement::getIdShort, Function.identity())));
 
		Property Vehicle_hasLocation= new Property();
		Vehicle_hasLocation.setIdShort("hasLocation");
		Vehicle_hasLocation.setValueType(ValueType.String);
		List<IKey> Vehicle_haslocationKeys= new ArrayList<IKey>();
		Reference Vehicle_hasLocationRef = new Reference(Vehicle_haslocationKeys);
		Vehicle_hasLocation.setSemanticId(Vehicle_hasLocationRef); 
 
		Vehicle_hasLocation.setKind(ModelingKind.TEMPLATE);
		Vehicle_Ontology_Thing_Vehiclevalue.add(Vehicle_hasLocation);

		Vehicle_hasLocation.setValue("null");


		Property Vehicle_purchaseDate= new Property();
		Vehicle_purchaseDate.setIdShort("purchaseDate");
		Vehicle_purchaseDate.setValueType(ValueType.DateTime);
		List<IKey> Vehicle_purchasedateKeys= new ArrayList<IKey>();
		Reference Vehicle_purchaseDateRef = new Reference(Vehicle_purchasedateKeys);
		Vehicle_purchaseDate.setSemanticId(Vehicle_purchaseDateRef); 
 
		Vehicle_purchaseDate.setKind(ModelingKind.TEMPLATE);
		Vehicle_Ontology_Thing_Vehiclevalue.add(Vehicle_purchaseDate);

		Vehicle_purchaseDate.setValue("null");


		Property Vehicle_existsAt= new Property();
		Vehicle_existsAt.setIdShort("existsAt");
		Vehicle_existsAt.setValueType(ValueType.DateTime);
		List<IKey> Vehicle_existsatKeys= new ArrayList<IKey>();
		Reference Vehicle_existsAtRef = new Reference(Vehicle_existsatKeys);
		Vehicle_existsAt.setSemanticId(Vehicle_existsAtRef); 
 
		Vehicle_existsAt.setKind(ModelingKind.TEMPLATE);
		Vehicle_Ontology_Thing_Vehiclevalue.add(Vehicle_existsAt);

		Vehicle_existsAt.setValue("null");


		Property Vehicle_productionDate= new Property();
		Vehicle_productionDate.setIdShort("productionDate");
		Vehicle_productionDate.setValueType(ValueType.DateTime);
		List<IKey> Vehicle_productiondateKeys= new ArrayList<IKey>();
		Reference Vehicle_productionDateRef = new Reference(Vehicle_productiondateKeys);
		Vehicle_productionDate.setSemanticId(Vehicle_productionDateRef); 
 
		Vehicle_productionDate.setKind(ModelingKind.TEMPLATE);
		Vehicle_Ontology_Thing_Vehiclevalue.add(Vehicle_productionDate);

		Vehicle_productionDate.setValue("null");


		Property Vehicle_brand= new Property();
		Vehicle_brand.setIdShort("brand");
		Vehicle_brand.setValueType(ValueType.String);
		List<IKey> Vehicle_brandKeys= new ArrayList<IKey>();
		Reference Vehicle_brandRef = new Reference(Vehicle_brandKeys);
		Vehicle_brand.setSemanticId(Vehicle_brandRef); 
 
		Vehicle_brand.setKind(ModelingKind.TEMPLATE);
		Vehicle_Ontology_Thing_Vehiclevalue.add(Vehicle_brand);

		Vehicle_brand.setValue("null");


		// Adding the SubmodelElements that belong to SubmodelElementCollection - Vehicle. 
		Vehicle_Ontology_Thing_Vehicle.setElements(Vehicle_Ontology_Thing_Vehiclevalue.stream().collect(Collectors.toMap(ISubmodelElement::getIdShort, Function.identity())));
 
	}
	
}


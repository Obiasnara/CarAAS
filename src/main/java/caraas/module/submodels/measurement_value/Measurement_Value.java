/*******************************************************************************
 * Copyright (c) 2024 DFKI.
 *
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *     DFKI - Tapanta Bhanja <tapanta.bhanja@dfki.de>
 *******************************************************************************/ 
package caraas.module.submodels.measurement_value;

import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.List;

import java.math.BigInteger; 

import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.datatype.Duration;
import javax.xml.namespace.QName;

import caraas.connection.ConnectedDevices;
//import caraas.connection.DataCrawler;
import caraas.module.AASServer;
import caraas.module.ConceptDescriptions;
import caraas.connection.OpcUaVariable;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.operation.Operation;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.SubmodelElementCollection;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.property.valuetype.ValueType;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.File;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.property.Property;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.dataelement.MultiLanguageProperty;
import org.eclipse.basyx.submodel.metamodel.map.qualifier.LangStrings;
import org.eclipse.basyx.submodel.metamodel.map.reference.Key; 
import org.eclipse.basyx.submodel.metamodel.map.reference.Reference; 
import org.eclipse.basyx.submodel.metamodel.api.reference.IKey;
import org.eclipse.basyx.submodel.metamodel.api.reference.enums.KeyElements; 
import org.eclipse.basyx.submodel.metamodel.api.reference.enums.KeyType; 
import org.eclipse.basyx.submodel.metamodel.api.identifier.IdentifierType;
import org.eclipse.basyx.submodel.metamodel.api.qualifier.haskind.ModelingKind;
import org.eclipse.basyx.submodel.metamodel.api.submodelelement.ISubmodelElement;
import org.eclipse.basyx.submodel.metamodel.map.Submodel;
import org.eclipse.basyx.submodel.metamodel.map.submodelelement.operation.OperationVariable;
import com.festo.aas.p4m.connection.ValueDelegate; 
import org.eclipse.basyx.vab.protocol.opcua.types.NodeId;
import org.eclipse.basyx.vab.protocol.opcua.types.UnsignedShort;
import com.festo.aas.p4m.connection.ConnectedProperty;

/**
 * 
 * @author DFKI
 * 
 * Do not edit this file for changing operation behaviours. 
 */

public class Measurement_Value extends Submodel {

	/**
	 * This field variable holds all configured connectors to the asset. 
	 * Use these connectors to communicate with your asset.
	 */
	private ConnectedDevices connectedDevices;

	private ConceptDescriptions conceptDescriptions;

	/**
     * This class contains all user-provided code for operations.
     */
	private final DynamicElementsWorkspace dew; 

	 /**
     * This class contains all user-provided code for value delegates.
     */

	 /**
     * The following contains the declaration of the operation variables as field variables so that they can be accessed in their true sense.
     */
	protected static Property CPU_Values_processID_KillProcess_Input = new Property("processID", ValueType.Integer);
		



	public Measurement_Value() {

		try {
			connectedDevices = new ConnectedDevices();
		} 
		catch (Exception e) {

			e.printStackTrace();
		}
		
		dew = new DynamicElementsWorkspace(connectedDevices);
		conceptDescriptions = new ConceptDescriptions();

		setIdShort("Measurement_Value");
		setIdentification(IdentifierType.IRI, AASServer.getSettings().SUBMODEL_MEASUREMENT_VALUE_IRI.get().toString()); 
		setKind(ModelingKind.INSTANCE); 
		List<IKey> measurement_valueKeys= new ArrayList<IKey>();
		Reference Measurement_ValueRef = new Reference(measurement_valueKeys);
		setSemanticId(Measurement_ValueRef); 
 
		SubmodelElementCollection Measurement_Value_Battery_Values = new SubmodelElementCollection();
		Collection<ISubmodelElement> Measurement_Value_Battery_Valuesvalue = new ArrayList<ISubmodelElement>();
		Measurement_Value_Battery_Values.setIdShort("Battery_Values");
		Measurement_Value_Battery_Values.setAllowDuplicates(false);
		Measurement_Value_Battery_Values.setOrdered(false);
     	Measurement_Value_Battery_Values.setKind(ModelingKind.TEMPLATE);
		addSubmodelElement(Measurement_Value_Battery_Values);
		List<IKey> Measurement_Value_battery_valuesKeys= new ArrayList<IKey>();
		Reference Measurement_Value_Battery_ValuesRef = new Reference(Measurement_Value_battery_valuesKeys);
		Measurement_Value_Battery_Values.setSemanticId(Measurement_Value_Battery_ValuesRef); 
 
		ValueDelegate<Collection<ISubmodelElement>> valDelMeasurement_Value_Battery_Values = ValueDelegate.installOn(Measurement_Value_Battery_Values); 
		valDelMeasurement_Value_Battery_Values.setGetHandler(dew::get_Measurement_Value_Battery_Values); 


		SubmodelElementCollection Measurement_Value_Engines_Values = new SubmodelElementCollection();
		Collection<ISubmodelElement> Measurement_Value_Engines_Valuesvalue = new ArrayList<ISubmodelElement>();
		Measurement_Value_Engines_Values.setIdShort("Engines_Values");
		Measurement_Value_Engines_Values.setAllowDuplicates(false);
		Measurement_Value_Engines_Values.setOrdered(false);
     	Measurement_Value_Engines_Values.setKind(ModelingKind.TEMPLATE);
		addSubmodelElement(Measurement_Value_Engines_Values);
		List<IKey> Measurement_Value_engines_valuesKeys= new ArrayList<IKey>();
		Reference Measurement_Value_Engines_ValuesRef = new Reference(Measurement_Value_engines_valuesKeys);
		Measurement_Value_Engines_Values.setSemanticId(Measurement_Value_Engines_ValuesRef); 
 
		ValueDelegate<Collection<ISubmodelElement>> valDelMeasurement_Value_Engines_Values = ValueDelegate.installOn(Measurement_Value_Engines_Values); 
		valDelMeasurement_Value_Engines_Values.setGetHandler(dew::get_Measurement_Value_Engines_Values); 


		SubmodelElementCollection Measurement_Value_Ultrasonic_Values = new SubmodelElementCollection();
		Collection<ISubmodelElement> Measurement_Value_Ultrasonic_Valuesvalue = new ArrayList<ISubmodelElement>();
		Measurement_Value_Ultrasonic_Values.setIdShort("Ultrasonic_Values");
		Measurement_Value_Ultrasonic_Values.setAllowDuplicates(false);
		Measurement_Value_Ultrasonic_Values.setOrdered(false);
     	Measurement_Value_Ultrasonic_Values.setKind(ModelingKind.TEMPLATE);
		addSubmodelElement(Measurement_Value_Ultrasonic_Values);
		List<IKey> Measurement_Value_ultrasonic_valuesKeys= new ArrayList<IKey>();
		Reference Measurement_Value_Ultrasonic_ValuesRef = new Reference(Measurement_Value_ultrasonic_valuesKeys);
		Measurement_Value_Ultrasonic_Values.setSemanticId(Measurement_Value_Ultrasonic_ValuesRef); 
 
		ValueDelegate<Collection<ISubmodelElement>> valDelMeasurement_Value_Ultrasonic_Values = ValueDelegate.installOn(Measurement_Value_Ultrasonic_Values); 
		valDelMeasurement_Value_Ultrasonic_Values.setGetHandler(dew::get_Measurement_Value_Ultrasonic_Values); 


		SubmodelElementCollection Measurement_Value_Video_Values = new SubmodelElementCollection();
		Collection<ISubmodelElement> Measurement_Value_Video_Valuesvalue = new ArrayList<ISubmodelElement>();
		Measurement_Value_Video_Values.setIdShort("Video_Values");
		Measurement_Value_Video_Values.setAllowDuplicates(false);
		Measurement_Value_Video_Values.setOrdered(false);
     	Measurement_Value_Video_Values.setKind(ModelingKind.TEMPLATE);
		addSubmodelElement(Measurement_Value_Video_Values);
		List<IKey> Measurement_Value_video_valuesKeys= new ArrayList<IKey>();
		Reference Measurement_Value_Video_ValuesRef = new Reference(Measurement_Value_video_valuesKeys);
		Measurement_Value_Video_Values.setSemanticId(Measurement_Value_Video_ValuesRef); 
 
		ValueDelegate<Collection<ISubmodelElement>> valDelMeasurement_Value_Video_Values = ValueDelegate.installOn(Measurement_Value_Video_Values); 
		valDelMeasurement_Value_Video_Values.setGetHandler(dew::get_Measurement_Value_Video_Values); 


		SubmodelElementCollection Measurement_Value_CPU_Values = new SubmodelElementCollection();
		Collection<ISubmodelElement> Measurement_Value_CPU_Valuesvalue = new ArrayList<ISubmodelElement>();
		Measurement_Value_CPU_Values.setIdShort("CPU_Values");
		Measurement_Value_CPU_Values.setAllowDuplicates(false);
		Measurement_Value_CPU_Values.setOrdered(false);
     	Measurement_Value_CPU_Values.setKind(ModelingKind.TEMPLATE);
		addSubmodelElement(Measurement_Value_CPU_Values);
		List<IKey> Measurement_Value_cpu_valuesKeys= new ArrayList<IKey>();
		Reference Measurement_Value_CPU_ValuesRef = new Reference(Measurement_Value_cpu_valuesKeys);
		Measurement_Value_CPU_Values.setSemanticId(Measurement_Value_CPU_ValuesRef); 
 
		ValueDelegate<Collection<ISubmodelElement>> valDelMeasurement_Value_CPU_Values = ValueDelegate.installOn(Measurement_Value_CPU_Values); 
		valDelMeasurement_Value_CPU_Values.setGetHandler(dew::get_Measurement_Value_CPU_Values); 


	}
	
}

